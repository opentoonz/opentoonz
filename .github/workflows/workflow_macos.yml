name: MacOS Build

on:
  push:
    paths:
      - '**/*'                                  # Include all files in the repository
      - '!appveyor.yml'                         # Ignore changes in AppVeyor
      - '!README.md'                            # Exclude README
      - '!doc/**'                               # Exclude documentation
      - '!**/.github/**'                        # Exclude everything in .github folder
      - '.github/workflows/workflow_macos.yml'  # Include MacOs workflow file
  pull_request:
    paths:
      - '**/*'
      - '!appveyor.yml'
      - '!README.md'
      - '!doc/**'
      - '!**/.github/**'
      - '.github/workflows/workflow_macos.yml'

jobs:
  macOS:
    timeout-minutes: 120 # Stop job if it exceeds expected build time
    # Stick with macOS 13 to avoid arm64 headaches on macOS 15
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v5

      - name: Fix Homebrew issues
        run: |
          # Remove unnecessary taps
          brew untap homebrew/cask || true
          brew untap homebrew/core || true
          # Run Homebrew maintenance
          brew doctor --quiet || true
          brew update --force
          brew cleanup
      - name: Install libraries
        run: |
          # Install meson explicitly (dependency for gobject-introspection)
          brew install meson
          # Install gobject-introspection from source
          echo "Installing gobject-introspection from source..."
          brew install --build-from-source gobject-introspection || {
            echo "Failed to install gobject-introspection"
            exit 1
          }
          # Function to install or upgrade remaining packages
          checkPkgAndInstall() {
            for pkg in "$@"; do
              if brew list -1 | grep -q "^${pkg}$"; then
                echo "$pkg already installed. Upgrading..."
                brew upgrade $pkg || true
              else
                echo "Installing $pkg..."
                brew install $pkg || {
                  echo "Failed to install $pkg"
                  exit 1
                }
              fi
            done
          }
          checkPkgAndInstall pkg-config glew lz4 libjpeg libpng lzo boost libusb libmypaint ccache jpeg-turbo ninja opencv openjph openexr qt@5
          brew unlink qt || true
      - name: Set up cache
        run: |
          export PATH="/usr/local/opt/ccache/libexec:$PATH"
          mkdir -p /Users/runner/.ccache
      - uses: actions/cache@v4
        with:
          path: /Users/runner/.ccache
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-

      - name: Build libtiff
        run: |
          cd thirdparty/tiff-4.0.3
          CFLAGS='-fPIC' CXXFLAGS='-fPIC' ./configure --disable-lzma
          make -j $(sysctl -n hw.ncpu)
      - name: Build
        run: |
          export PKG_CONFIG_PATH="/usr/local/opt/jpeg-turbo/lib/pkgconfig:$PKG_CONFIG_PATH"
          cd toonz
          mkdir -p build
          cd build
          cmake ../sources -G Ninja \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DQT_PATH=$(brew --prefix qt@5)/lib \
            -DQt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5 \
            -DCMAKE_PREFIX_PATH=$(brew --prefix qt@5)/lib/cmake/Qt5 \
            -DWITH_TRANSLATION=OFF
          ninja -j $(sysctl -n hw.ncpu)
      - name: Introduce Libraries and Stuff
        run: |
          cd toonz/build/toonz
          cp -pr ../../../stuff OpenToonz.app/portablestuff
          /usr/local/opt/qt@5/bin/macdeployqt OpenToonz.app -verbose=0 -always-overwrite \
            -executable=OpenToonz.app/Contents/MacOS/lzocompress \
            -executable=OpenToonz.app/Contents/MacOS/lzodecompress \
            -executable=OpenToonz.app/Contents/MacOS/tcleanup \
            -executable=OpenToonz.app/Contents/MacOS/tcomposer \
            -executable=OpenToonz.app/Contents/MacOS/tconverter \
            -executable=OpenToonz.app/Contents/MacOS/tfarmcontroller \
            -executable=OpenToonz.app/Contents/MacOS/tfarmserver
      - name: Modify Library Paths
        run: |
          cd toonz/build/toonz/OpenToonz.app/Contents/Frameworks
          for TARGETLIB in *.dylib; do
            otool -L "$TARGETLIB" | grep ".dylib" | grep -v "$TARGETLIB" | grep -v "@executable_path/../Frameworks" | awk '{print $1}' | while read -r FROMPATH; do
              LIBNAME=$(basename "$FROMPATH")
              if [[ -e ./$LIBNAME ]]; then
                install_name_tool -change "$FROMPATH" "@executable_path/../Frameworks/$LIBNAME" "$TARGETLIB"
              fi
            done
          done
      - name: Create Artifact
        run: |
          cd toonz/build/toonz
          echo "Creating DMG..."
          ATTEMPT=1
          until /usr/local/opt/qt@5/bin/macdeployqt OpenToonz.app -dmg -verbose=0 && [ -f OpenToonz.dmg ]; do
            echo "Attempt $ATTEMPT failed to build DMG."
            if [ $ATTEMPT -eq 10 ]; then
              echo ">>> DMG file creation failed after 10 attempts. Aborting!"
              exit 1
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Retrying in 5 seconds..."
            sleep 5
          done
          echo "DMG created successfully."
      - uses: actions/upload-artifact@v4
        with:
          name: Opentoonz-${{ runner.os }}-${{ github.sha }}
          path: toonz/build/toonz/OpenToonz.dmg