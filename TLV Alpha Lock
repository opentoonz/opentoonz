
@@ -459,6 +459,7 @@ class PaintbrushToolOptionsBox final : public ToolOptionsBox {

  ToolOptionCombo *m_colorMode;
  ToolOptionCheckbox *m_selectiveMode;
  ToolOptionCheckbox *m_lockAlphaMode;

public:
  PaintbrushToolOptionsBox(QWidget *parent, TTool *tool,
  6  toonz/sources/include/toonz/rasterstrokegenerator.h 
Viewed
@@ -37,6 +37,7 @@ class DVAPI RasterStrokeGenerator {
  bool m_doAnArc;
  bool m_isPaletteOrder;  // Used in the Draw Order option of Brush Tool,
                          // use style order to define line stacking order
  bool m_modifierLockAlpha;
  QSet<int> m_aboveStyleIds;

  // Ricalcola i punti in un nuovo sistema di riferimento
@@ -50,13 +51,14 @@ class DVAPI RasterStrokeGenerator {
public:
  RasterStrokeGenerator(const TRasterCM32P &raster, Tasks task,
                        ColorType colorType, int styleId, const TThickPoint &p,
                        bool selective, int selectedStyle, bool keepAntialias,
                        bool isPaletteOrder = false);
                        bool selective, int selectedStyle, bool lockAlpha,
                        bool keepAntialias, bool isPaletteOrder = false);
  ~RasterStrokeGenerator();
  void setRaster(const TRasterCM32P &ras) { m_raster = ras; }
  void setStyle(int styleId) { m_styleId = styleId; }
  int getStyleId() const { return m_styleId; }
  bool isSelective() { return m_selective; }
  bool isAlphaLocked() { return m_modifierLockAlpha; }

  bool isPaletteOrder() { return m_isPaletteOrder; }
  void setAboveStyleIds(QSet<int> &ids) { m_aboveStyleIds = ids; }
  25  toonz/sources/tnztools/bluredbrush.cpp 
Viewed
@@ -27,7 +27,8 @@ QImage rasterToQImage(const TRasterP &ras, bool premultiplied = false) {
//----------------------------------------------------------------------------------
// drawOrderMode : 0=OverAll, 1=UnderAll, 2=PaletteOrder
void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId,
                   int drawOrderMode, const QSet<int> &aboveStyleIds) {
                   int drawOrderMode, bool lockAlpha,
                   const QSet<int> &aboveStyleIds) {
  if (!out.getPointer() || !in.getPointer()) return;
  assert(out->getSize() == in->getSize());
  int x, y;
@@ -43,6 +44,12 @@ void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId,
        TPixel32 *inPix = &in->pixels(y)[x];
        if (inPix->m == 0) continue;
        TPixelCM32 *outPix = &out->pixels(y)[x];
        if (lockAlpha && !outPix->isPureInk() && outPix->getPaint() == 0 &&
            outPix->getTone() == 255) {
          *outPix = TPixelCM32(outPix->getInk(), outPix->getPaint(),
                               outPix->getTone());
          continue;
        }
        bool sameStyleId   = styleId == outPix->getInk();
        // line with the same style : multiply tones
        // line with different style : pick darker tone
@@ -66,6 +73,12 @@ void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId,
        TPixel32 *inPix = &in->pixels(y)[x];
        if (inPix->m == 0) continue;
        TPixelCM32 *outPix = &out->pixels(y)[x];
        if (lockAlpha && !outPix->isPureInk() && outPix->getPaint() == 0 &&
            outPix->getTone() == 255) {
          *outPix = TPixelCM32(outPix->getInk(), outPix->getPaint(),
                               outPix->getTone());
          continue;
        }
        bool sameStyleId   = styleId == outPix->getInk();
        // line with the same style : multiply tones
        // line with different style : pick darker tone
@@ -83,6 +96,12 @@ void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId,
        TPixel32 *inPix = &in->pixels(y)[x];
        if (inPix->m == 0) continue;
        TPixelCM32 *outPix = &out->pixels(y)[x];
        if (lockAlpha && !outPix->isPureInk() && outPix->getPaint() == 0 &&
            outPix->getTone() == 255) {
          *outPix = TPixelCM32(outPix->getInk(), outPix->getPaint(),
                               outPix->getTone());
          continue;
        }
        bool sameStyleId   = styleId == outPix->getInk();
        // line with the same style : multiply tones
        // line with different style : pick darker tone
@@ -365,7 +384,7 @@ void BluredBrush::eraseDrawing(const TRasterP ras, const TRasterP rasBackup,
void BluredBrush::updateDrawing(const TRasterCM32P rasCM,
                                const TRasterCM32P rasBackupCM,
                                const TRect &bbox, int styleId,
                                int drawOrderMode) const {
                                int drawOrderMode, bool lockAlpha) const {
  if (!rasCM) return;

  TRect rasRect    = rasCM->getBounds();
@@ -374,7 +393,7 @@ void BluredBrush::updateDrawing(const TRasterCM32P rasCM,

  rasCM->copy(rasBackupCM->extract(targetRect), targetRect.getP00());
  putOnRasterCM(rasCM->extract(targetRect), m_ras->extract(targetRect), styleId,
                drawOrderMode, m_aboveStyleIds);
                drawOrderMode, lockAlpha, m_aboveStyleIds);
}

//----------------------------------------------------------------------------------
  3  toonz/sources/tnztools/bluredbrush.h 
Viewed
@@ -40,7 +40,8 @@ class BluredBrush {
  TRect getBoundFromPoints(const std::vector<TThickPoint> &points) const;
  // colormapped
  void updateDrawing(const TRasterCM32P rasCM, const TRasterCM32P rasBackupCM,
                     const TRect &bbox, int styleId, int drawOrderMode) const;
                     const TRect &bbox, int styleId, int drawOrderMode,
                     bool lockAlpha) const;
  void eraseDrawing(const TRasterCM32P rasCM, const TRasterCM32P rasBackupCM,
                    const TRect &bbox, bool selective, int selectedStyleId,
                    const std::wstring &mode) const;
  4  toonz/sources/tnztools/fingertool.cpp 
Viewed
@@ -75,7 +75,7 @@ class FingerUndo final : public TRasterUndo {
    TToonzImageP image = m_level->getFrame(m_frameId, true);
    TRasterCM32P ras   = image->getRaster();
    RasterStrokeGenerator m_rasterTrack(ras, FINGER, INK, m_styleId,
                                        m_points[0], m_invert, 0, false);
                                        m_points[0], m_invert, 0, false, false);
    m_rasterTrack.setPointsSequence(m_points);
    m_rasterTrack.generateStroke(true);
    image->setSavebox(image->getSavebox() +
@@ -409,7 +409,7 @@ void FingerTool::leftButtonDown(const TPointD &pos, const TMouseEvent &e) {
      m_rasterTrack         = new RasterStrokeGenerator(
          ras, FINGER, INK, styleId,
          TThickPoint(pos + convert(ras->getCenter()), thickness),
          m_invert.getValue(), 0, false);
          m_invert.getValue(), 0, false, false);

      /*-- 作業中Fidを現在のFIDにする --*/
      m_workingFrameId = getFrameId();
  6  toonz/sources/tnztools/fullcolorbrushtool.cpp 
Viewed
@@ -123,7 +123,7 @@ FullColorBrushTool::FullColorBrushTool(std::string name)
    , m_modifierSize("ModifierSize", -3, 3, 0, true)
    , m_modifierOpacity("ModifierOpacity", 0, 100, 100, true)
    , m_modifierEraser("ModifierEraser", false)
    , m_modifierLockAlpha("ModifierLockAlpha", false)
    , m_modifierLockAlpha("Lock Alpha", false)
    , m_preset("Preset:")
    , m_minCursorThick(0)
    , m_maxCursorThick(0)
@@ -1176,6 +1176,10 @@ void FullColorBrushTool::applyClassicToonzBrushSettings(
                                 MYPAINT_BRUSH_INPUT_PRESSURE, 1, 1.0,
                                 maxOpacity - minOpacity);
  }

  if (m_modifierLockAlpha.getValue()) {
    mypaintBrush.setBaseValue(MYPAINT_BRUSH_SETTING_LOCK_ALPHA, 1.0);
  }
}

void FullColorBrushTool::applyToonzBrushSettings(mypaint::Brush &mypaintBrush) {
  2  toonz/sources/tnztools/geometrictool.cpp 
Viewed
@@ -181,7 +181,7 @@ static TRect drawBluredBrush(const TToonzImageP &ti, TStroke *stroke, int thick,
    TRect chunkBox = brush.getBoundFromPoints(points);
    brush.addArc(points[0], points[1], points[2], 1, 1);
    brush.updateDrawing(ti->getRaster(), backupRas, chunkBox, styleId,
                        selective);
                        selective, false);
  }

  delete s;
  18  toonz/sources/tnztools/mypainttoonzbrush.cpp 
Viewed
@@ -9,7 +9,8 @@
#include <QColor>

namespace {
void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId) {
void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId,
                   bool lockAlpha) {
  if (!out.getPointer() || !in.getPointer()) return;
  assert(out->getSize() == in->getSize());
  int x, y;
@@ -24,7 +25,13 @@ void putOnRasterCM(const TRasterCM32P &out, const TRaster32P &in, int styleId) {
      TPixel32 *inPix = &in->pixels(y)[x];
      if (inPix->m == 0) continue;
      TPixelCM32 *outPix = &out->pixels(y)[x];
      bool sameStyleId   = styleId == outPix->getInk();
      if (lockAlpha && !outPix->isPureInk() && outPix->getPaint() == 0 &&
          outPix->getTone() == 255) {
        *outPix =
            TPixelCM32(outPix->getInk(), outPix->getPaint(), outPix->getTone());
        continue;
      }
      bool sameStyleId = styleId == outPix->getInk();
      // line with the same style : multiply tones
      // line with different style : pick darker tone
      int tone = sameStyleId ? outPix->getTone() * (255 - inPix->m) / 255
@@ -196,14 +203,15 @@ void MyPaintToonzBrush::strokeTo(const TPointD &point, double pressure,

void MyPaintToonzBrush::updateDrawing(const TRasterCM32P rasCM,
                                      const TRasterCM32P rasBackupCM,
                                      const TRect &bbox, int styleId) const {
                                      const TRect &bbox, int styleId,
                                      bool lockAlpha) const {
  if (!rasCM) return;

  TRect rasRect    = rasCM->getBounds();
  TRect targetRect = bbox * rasRect;
  if (targetRect.isEmpty()) return;

  rasCM->copy(rasBackupCM->extract(targetRect), targetRect.getP00());
  putOnRasterCM(rasCM->extract(targetRect), m_ras->extract(targetRect),
                styleId);
  putOnRasterCM(rasCM->extract(targetRect), m_ras->extract(targetRect), styleId,
                lockAlpha);
} 
  2  toonz/sources/tnztools/mypainttoonzbrush.h 
Viewed
@@ -130,7 +130,7 @@ class MyPaintToonzBrush {

  // colormapped
  void updateDrawing(const TRasterCM32P rasCM, const TRasterCM32P rasBackupCM,
                     const TRect &bbox, int styleId) const;
                     const TRect &bbox, int styleId, bool lockAlpha) const;
};

#endif  // T_BLUREDBRUSH
  39  toonz/sources/tnztools/paintbrushtool.cpp 
Viewed
@@ -53,6 +53,7 @@ TEnv::DoubleVar PaintBrushSizeMax("InknpaintPaintBrushSizeMax", 10);
TEnv::DoubleVar PaintBrushSizeMin("InknpaintPaintBrushSizeMin", 10);
TEnv::IntVar PaintBrushPressureSensitivity("InknpaintBrushPressureSensitivity",
                                           1);
TEnv::IntVar PaintBrushModifierLockAlpha("PaintBrushModifierLockAlpha", 0);

//-----------------------------------------------------------------------------

@@ -67,22 +68,25 @@ class BrushUndo final : public TRasterUndo {
  int m_styleId;
  bool m_selective;
  ColorType m_colorType;
  bool m_modifierLockAlpha;

public:
  BrushUndo(TTileSetCM32 *tileSet, const std::vector<TThickPoint> &points,
            ColorType colorType, int styleId, bool selective,
            TXshSimpleLevel *level, const TFrameId &frameId)
            TXshSimpleLevel *level, const TFrameId &frameId, bool lockAlpha)
      : TRasterUndo(tileSet, level, frameId, false, false, 0)
      , m_points(points)
      , m_styleId(styleId)
      , m_selective(selective)
      , m_colorType(colorType) {}
      , m_colorType(colorType)
      , m_modifierLockAlpha(lockAlpha) {}

  void redo() const override {
    TToonzImageP image = m_level->getFrame(m_frameId, true);
    TRasterCM32P ras   = image->getRaster();
    RasterStrokeGenerator m_rasterTrack(ras, PAINTBRUSH, m_colorType, m_styleId,
                                        m_points[0], m_selective, 0, false);
                                        m_points[0], m_selective, 0,
                                        m_modifierLockAlpha, false);
    m_rasterTrack.setPointsSequence(m_points);
    m_rasterTrack.generateStroke(true);
    image->setSavebox(image->getSavebox() +
@@ -285,6 +289,8 @@ class PaintBrushTool final : public TTool {

  Tasks m_task;

  TBoolProperty m_modifierLockAlpha;

  int getStyleUnderCursor(const TPointD &pos);

public:
@@ -346,7 +352,8 @@ PaintBrushTool::PaintBrushTool()
    , m_firstTime(true)
    , m_pressure("Pressure", true)
    , m_task(PAINTBRUSH)
    , m_workingFrameId(TFrameId()) {
    , m_workingFrameId(TFrameId())
    , m_modifierLockAlpha("Lock Alpha", false) {
  m_rasThickness.setNonLinearSlider();

  m_colorType.addValue(LINES);
@@ -359,10 +366,12 @@ PaintBrushTool::PaintBrushTool()
  m_prop.bind(m_colorType);
  m_prop.bind(m_onlyEmptyAreas);
  m_prop.bind(m_pressure);
  m_prop.bind(m_modifierLockAlpha);

  m_onlyEmptyAreas.setId("Selective");
  m_colorType.setId("Mode");
  m_pressure.setId("PressureSensitivity");
  m_modifierLockAlpha.setId("LockAlpha");
}

//-----------------------------------------------------------------------------
@@ -378,6 +387,8 @@ void PaintBrushTool::updateTranslation() {
  m_onlyEmptyAreas.setQStringName(tr("Selective", NULL));

  m_pressure.setQStringName(tr("Pressure"));

  m_modifierLockAlpha.setQStringName(tr("Lock Alpha"));
}

//-------------------------------------------------------------------------------------------------------
@@ -446,18 +457,31 @@ bool PaintBrushTool::onPropertyChanged(std::string propertyName) {
  PaintBrushSizeMin             = m_rasThickness.getValue().first;
  PaintBrushSizeMax             = m_rasThickness.getValue().second;
  PaintBrushPressureSensitivity = m_pressure.getValue();
  PaintBrushModifierLockAlpha = (int)(m_modifierLockAlpha.getValue());

  /*-- Size ---*/
  if (propertyName == m_rasThickness.getName()) {
    m_minThick = m_rasThickness.getValue().first;
    m_maxThick = m_rasThickness.getValue().second;
  }

  // Selective
  else if (propertyName == m_onlyEmptyAreas.getName()) {
    if (m_onlyEmptyAreas.getValue() && m_modifierLockAlpha.getValue())
      m_modifierLockAlpha.setValue(false);
  }

  // Areas, Lines etc.
  else if (propertyName == m_colorType.getName()) {
    /*--- ColorModelのCursor更新のためにSIGNALを出す ---*/
    TTool::getApplication()->getCurrentTool()->notifyToolChanged();
  }

  // Lock Alpha
  else if (propertyName == m_modifierLockAlpha.getName()) {
    if (m_modifierLockAlpha.getValue() && m_onlyEmptyAreas.getValue())
      m_onlyEmptyAreas.setValue(false);
  }
  return true;
}

@@ -503,7 +527,8 @@ void PaintBrushTool::leftButtonDown(const TPointD &pos, const TMouseEvent &e) {
      m_rasterTrack         = new RasterStrokeGenerator(
          ras, m_task, m_colorTypeBrush, styleId,
          TThickPoint(m_mousePos + convert(ras->getCenter()), thickness),
          m_onlyEmptyAreas.getValue(), 0, false);
          m_onlyEmptyAreas.getValue(), 0, m_modifierLockAlpha.getValue(),
          false);
      /*-- 現在のFidを記憶 --*/
      m_workingFrameId = getFrameId();
      m_tileSaver->save(m_rasterTrack->getLastRect());
@@ -575,6 +600,7 @@ void PaintBrushTool::onEnter() {
    m_rasThickness.setValue(
        TDoublePairProperty::Value(PaintBrushSizeMin, PaintBrushSizeMax));
    m_pressure.setValue(PaintBrushPressureSensitivity ? 1 : 0);
    m_modifierLockAlpha.setValue(PaintBrushModifierLockAlpha ? 1 : 0);
    m_firstTime = false;
  }

@@ -640,7 +666,8 @@ void PaintBrushTool::finishBrush(double pressureValue) {
      TUndoManager::manager()->add(new BrushUndo(
          m_tileSaver->getTileSet(), m_rasterTrack->getPointsSequence(),
          m_colorTypeBrush, m_rasterTrack->getStyleId(),
          m_rasterTrack->isSelective(), simLevel.getPointer(), frameId));
          m_rasterTrack->isSelective(), simLevel.getPointer(), frameId,
          m_rasterTrack->isAlphaLocked()));
      ToolUtils::updateSaveBox();

      /*--- FIdを指定して、描画中にフレームが変わっても、
  4  toonz/sources/tnztools/rastererasertool.cpp 
Viewed
@@ -180,7 +180,7 @@ class RasterEraserUndo final : public TRasterUndo {
    TToonzImageP image = m_level->getFrame(m_frameId, true);
    TRasterCM32P ras   = image->getRaster();
    RasterStrokeGenerator m_rasterTrack(ras, ERASE, m_colorType, 0, m_points[0],
                                        m_selective, m_colorSelected,
                                        m_selective, m_colorSelected, false,
                                        !m_isPencil);
    m_rasterTrack.setPointsSequence(m_points);
    m_rasterTrack.generateStroke(m_isPencil);
@@ -1079,7 +1079,7 @@ void EraserTool::leftButtonDown(const TPointD &pos, const TMouseEvent &e) {
        if (m_colorType.getValue() == ALL) m_colorTypeEraser   = INKNPAINT;
        m_normalEraser = new RasterStrokeGenerator(
            raster, ERASE, m_colorTypeEraser, 0, intPos,
            m_currentStyle.getValue(), currentStyle,
            m_currentStyle.getValue(), currentStyle, false,
            !(m_pencil.getValue() || m_colorType.getValue() == AREAS));
        m_tileSaver->save(m_normalEraser->getLastRect());
        m_normalEraser->generateLastPieceOfStroke(
  17  toonz/sources/tnztools/tooloptions.cpp 
Viewed
@@ -1494,9 +1494,13 @@ PaintbrushToolOptionsBox::PaintbrushToolOptionsBox(QWidget *parent, TTool *tool,
  m_colorMode = dynamic_cast<ToolOptionCombo *>(m_controls.value("Mode:"));
  m_selectiveMode =
      dynamic_cast<ToolOptionCheckbox *>(m_controls.value("Selective"));
  m_lockAlphaMode =
      dynamic_cast<ToolOptionCheckbox *>(m_controls.value("Lock Alpha"));

  if (m_colorMode->getProperty()->getValue() == L"Lines")
  if (m_colorMode->getProperty()->getValue() == L"Lines") {
    m_selectiveMode->setVisible(false);
    m_lockAlphaMode->setVisible(false);
  }

  bool ret = connect(m_colorMode, SIGNAL(currentIndexChanged(int)), this,
                     SLOT(onColorModeChanged(int)));
@@ -1517,6 +1521,7 @@ void PaintbrushToolOptionsBox::onColorModeChanged(int index) {
  const TEnumProperty::Range &range = m_colorMode->getProperty()->getRange();
  bool enabled                      = range[index] != L"Lines";
  m_selectiveMode->setVisible(enabled);
  m_lockAlphaMode->setVisible(enabled);
}

//=============================================================================
@@ -1900,16 +1905,18 @@ void BrushToolOptionsBox::filterControls() {
  for (QMap<std::string, QLabel *>::iterator it = m_labels.begin();
       it != m_labels.end(); it++) {
    bool isModifier = (it.key().substr(0, 8) == "Modifier");
    bool isCommon   = (it.key() == "Pressure" || it.key() == "Preset:");
    bool visible    = isCommon || (isModifier == showModifiers);
    bool isCommon   = (it.key() == "Lock Alpha" || it.key() == "Pressure" ||
                     it.key() == "Preset:");
    bool visible = isCommon || (isModifier == showModifiers);
    it.value()->setVisible(visible);
  }

  for (QMap<std::string, ToolOptionControl *>::iterator it = m_controls.begin();
       it != m_controls.end(); it++) {
    bool isModifier = (it.key().substr(0, 8) == "Modifier");
    bool isCommon   = (it.key() == "Pressure" || it.key() == "Preset:");
    bool visible    = isCommon || (isModifier == showModifiers);
    bool isCommon   = (it.key() == "Lock Alpha" || it.key() == "Pressure" ||
                     it.key() == "Preset:");
    bool visible = isCommon || (isModifier == showModifiers);
    if (QWidget *widget = dynamic_cast<QWidget *>(it.value()))
      widget->setVisible(visible);
  }
  89  toonz/sources/tnztools/toonzrasterbrushtool.cpp 
Viewed
@@ -58,6 +58,7 @@ TEnv::IntVar BrushPressureSensitivity("InknpaintBrushPressureSensitivity", 1);
TEnv::DoubleVar RasterBrushHardness("RasterBrushHardness", 100);
TEnv::DoubleVar RasterBrushModifierSize("RasterBrushModifierSize", 0);
TEnv::StringVar RasterBrushPreset("RasterBrushPreset", "<custom>");
TEnv::IntVar BrushLockAlpha("InknpaintBrushLockAlpha", 0);

//-------------------------------------------------------------------
#define CUSTOM_WSTR L"<custom>"
@@ -438,28 +439,30 @@ class RasterBrushUndo final : public TRasterUndo {
  bool m_isPaletteOrder;
  bool m_isPencil;
  bool m_isStraight;
  bool m_modifierLockAlpha;

public:
  RasterBrushUndo(TTileSetCM32 *tileSet, const std::vector<TThickPoint> &points,
                  int styleId, bool selective, TXshSimpleLevel *level,
                  const TFrameId &frameId, bool isPencil, bool isFrameCreated,
                  bool isLevelCreated, bool isPaletteOrder,
                  bool isLevelCreated, bool isPaletteOrder, bool lockAlpha,
                  bool isStraight = false)
      : TRasterUndo(tileSet, level, frameId, isFrameCreated, isLevelCreated, 0)
      , m_points(points)
      , m_styleId(styleId)
      , m_selective(selective)
      , m_isPencil(isPencil)
      , m_isStraight(isStraight)
      , m_isPaletteOrder(isPaletteOrder) {}
      , m_isPaletteOrder(isPaletteOrder)
      , m_modifierLockAlpha(lockAlpha) {}

  void redo() const override {
    insertLevelAndFrameIfNeeded();
    TToonzImageP image = getImage();
    TRasterCM32P ras   = image->getRaster();
    RasterStrokeGenerator m_rasterTrack(ras, BRUSH, NONE, m_styleId,
                                        m_points[0], m_selective, 0,
                                        !m_isPencil, m_isPaletteOrder);
    RasterStrokeGenerator m_rasterTrack(
        ras, BRUSH, NONE, m_styleId, m_points[0], m_selective, 0,
        m_modifierLockAlpha, !m_isPencil, m_isPaletteOrder);
    if (m_isPaletteOrder) {
      QSet<int> aboveStyleIds;
      getAboveStyleIdSet(m_styleId, image->getPalette(), aboveStyleIds);
@@ -490,21 +493,23 @@ class RasterBluredBrushUndo final : public TRasterUndo {
  int m_maxThick;
  double m_hardness;
  bool m_isStraight;
  bool m_modifierLockAlpha;

public:
  RasterBluredBrushUndo(TTileSetCM32 *tileSet,
                        const std::vector<TThickPoint> &points, int styleId,
                        DrawOrder drawOrder, TXshSimpleLevel *level,
                        const TFrameId &frameId, int maxThick, double hardness,
                        bool isFrameCreated, bool isLevelCreated,
                        bool isStraight = false)
                        DrawOrder drawOrder, bool lockAlpha,
                        TXshSimpleLevel *level, const TFrameId &frameId,
                        int maxThick, double hardness, bool isFrameCreated,
                        bool isLevelCreated, bool isStraight = false)
      : TRasterUndo(tileSet, level, frameId, isFrameCreated, isLevelCreated, 0)
      , m_points(points)
      , m_styleId(styleId)
      , m_drawOrder(drawOrder)
      , m_maxThick(maxThick)
      , m_isStraight(isStraight)
      , m_hardness(hardness) {}
      , m_hardness(hardness)
      , m_modifierLockAlpha(lockAlpha) {}

  void redo() const override {
    if (m_points.size() == 0) return;
@@ -527,23 +532,26 @@ class RasterBluredBrushUndo final : public TRasterUndo {
    points.push_back(m_points[0]);
    TRect bbox = brush.getBoundFromPoints(points);
    brush.addPoint(m_points[0], 1);
    brush.updateDrawing(ras, ras, bbox, m_styleId, (int)m_drawOrder);
    brush.updateDrawing(ras, ras, bbox, m_styleId, (int)m_drawOrder,
                        m_modifierLockAlpha);
    if (m_isStraight) {
      points.clear();
      points.push_back(m_points[0]);
      points.push_back(m_points[1]);
      points.push_back(m_points[2]);
      bbox = brush.getBoundFromPoints(points);
      brush.addArc(m_points[0], m_points[1], m_points[2], 1, 1);
      brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder);
      brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder,
                          m_modifierLockAlpha);
    } else if (m_points.size() > 1) {
      points.clear();
      points.push_back(m_points[0]);
      points.push_back(m_points[1]);
      bbox = brush.getBoundFromPoints(points);
      brush.addArc(m_points[0], (m_points[1] + m_points[0]) * 0.5, m_points[1],
                   1, 1);
      brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder);
      brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder,
                          m_modifierLockAlpha);
      int i;
      for (i = 1; i + 2 < (int)m_points.size(); i = i + 2) {
        points.clear();
@@ -552,7 +560,8 @@ class RasterBluredBrushUndo final : public TRasterUndo {
        points.push_back(m_points[i + 2]);
        bbox = brush.getBoundFromPoints(points);
        brush.addArc(m_points[i], m_points[i + 1], m_points[i + 2], 1, 1);
        brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder);
        brush.updateDrawing(ras, backupRas, bbox, m_styleId, (int)m_drawOrder,
                            m_modifierLockAlpha);
      }
    }
    ToolUtils::updateSaveBox();
@@ -855,7 +864,8 @@ ToonzRasterBrushTool::ToonzRasterBrushTool(std::string name, int targetType)
    , m_presetsLoaded(false)
    , m_targetType(targetType)
    , m_workingFrameId(TFrameId())
    , m_notifier(0) {
    , m_notifier(0)
    , m_modifierLockAlpha("Lock Alpha", false) {
  bind(targetType);

  m_rasThickness.setNonLinearSlider();
@@ -865,6 +875,7 @@ ToonzRasterBrushTool::ToonzRasterBrushTool(std::string name, int targetType)
  m_prop[0].bind(m_smooth);
  m_prop[0].bind(m_drawOrder);
  m_prop[0].bind(m_modifierSize);
  m_prop[0].bind(m_modifierLockAlpha);
  m_prop[0].bind(m_pencil);
  m_pencil.setId("PencilMode");

@@ -879,6 +890,7 @@ ToonzRasterBrushTool::ToonzRasterBrushTool(std::string name, int targetType)
  m_preset.setId("BrushPreset");
  m_preset.addValue(CUSTOM_WSTR);
  m_pressure.setId("PressureSensitivity");
  m_modifierLockAlpha.setId("LockAlpha");
}

//-------------------------------------------------------------------------------------------------------
@@ -1072,6 +1084,7 @@ void ToonzRasterBrushTool::updateTranslation() {
  m_preset.setItemUIName(CUSTOM_WSTR, tr("<custom>"));
  m_pencil.setQStringName(tr("Pencil"));
  m_pressure.setQStringName(tr("Pressure"));
  m_modifierLockAlpha.setQStringName(tr("Lock Alpha"));
}

//---------------------------------------------------------------------------------------------------
@@ -1369,7 +1382,7 @@ void ToonzRasterBrushTool::leftButtonDown(const TPointD &pos,
      if (!updateRect.isEmpty()) {
        // ras->extract(updateRect)->copy(m_workRas->extract(updateRect));
        m_toonz_brush->updateDrawing(ri->getRaster(), m_backupRas, m_strokeRect,
                                     m_styleId);
                                     m_styleId, m_modifierLockAlpha.getValue());
      }
      m_lastRect = m_strokeRect;

@@ -1388,7 +1401,8 @@ void ToonzRasterBrushTool::leftButtonDown(const TPointD &pos,
                             thickness);
      m_rasterTrack = new RasterStrokeGenerator(
          ras, BRUSH, NONE, m_styleId, thickPoint, drawOrder != OverAll, 0,
          !m_pencil.getValue(), drawOrder == PaletteOrder);
          m_modifierLockAlpha.getValue(), !m_pencil.getValue(),
          drawOrder == PaletteOrder);

      if (drawOrder == PaletteOrder)
        m_rasterTrack->setAboveStyleIds(aboveStyleIds);
@@ -1418,7 +1432,8 @@ void ToonzRasterBrushTool::leftButtonDown(const TPointD &pos,
      m_tileSaver->save(m_strokeRect);
      m_bluredBrush->addPoint(point, 1);
      m_bluredBrush->updateDrawing(ri->getRaster(), m_backupRas, m_strokeRect,
                                   m_styleId, drawOrder);
                                   m_styleId, drawOrder,
                                   m_modifierLockAlpha.getValue());
      m_lastRect = m_strokeRect;

      std::vector<TThickPoint> pts;
@@ -1684,7 +1699,7 @@ void ToonzRasterBrushTool::leftButtonDrag(const TPointD &pos,
    if (!updateRect.isEmpty()) {
      // ras->extract(updateRect)->copy(m_workRaster->extract(updateRect));
      m_toonz_brush->updateDrawing(ras, m_backupRas, m_strokeSegmentRect,
                                   m_styleId);
                                   m_styleId, m_modifierLockAlpha.getValue());
    }
    m_lastRect = m_strokeRect;

@@ -1771,7 +1786,8 @@ void ToonzRasterBrushTool::leftButtonDrag(const TPointD &pos,
      invalidateRect += ToolUtils::getBounds(points, maxThickness) - rasCenter;

      m_bluredBrush->updateDrawing(ti->getRaster(), m_backupRas, bbox,
                                   m_styleId, m_drawOrder.getIndex());
                                   m_styleId, m_drawOrder.getIndex(),
                                   m_modifierLockAlpha.getValue());
      m_strokeRect += bbox;
    }
  }
@@ -1848,7 +1864,7 @@ void ToonzRasterBrushTool::finishRasterBrush(const TPointD &pos,
    if (!updateRect.isEmpty()) {
      // ras->extract(updateRect)->copy(m_workRaster->extract(updateRect));
      m_toonz_brush->updateDrawing(ras, m_backupRas, m_strokeSegmentRect,
                                   m_styleId);
                                   m_styleId, m_modifierLockAlpha.getValue());
    }
    TPointD thickOffset(m_maxCursorThick * 0.5,
                        m_maxCursorThick * 0.5);  // TODO
@@ -1935,7 +1951,8 @@ void ToonzRasterBrushTool::finishRasterBrush(const TPointD &pos,
          m_tileSet, m_rasterTrack->getPointsSequence(),
          m_rasterTrack->getStyleId(), m_rasterTrack->isSelective(),
          simLevel.getPointer(), frameId, m_pencil.getValue(), m_isFrameCreated,
          m_isLevelCreated, m_rasterTrack->isPaletteOrder(), m_isStraight));
          m_isLevelCreated, m_rasterTrack->isPaletteOrder(),
          m_rasterTrack->isAlphaLocked(), m_isStraight));
    }
    delete m_rasterTrack;
    m_rasterTrack = 0;
@@ -2001,7 +2018,8 @@ void ToonzRasterBrushTool::finishRasterBrush(const TPointD &pos,
            ToolUtils::getBounds(points, maxThickness) - rasCenter;

        m_bluredBrush->updateDrawing(ti->getRaster(), m_backupRas, bbox,
                                     m_styleId, m_drawOrder.getIndex());
                                     m_styleId, m_drawOrder.getIndex(),
                                     m_modifierLockAlpha.getValue());
        m_strokeRect += bbox;
      }
      if (!m_isStraight && m_points.size() > 1) {
@@ -2029,7 +2047,8 @@ void ToonzRasterBrushTool::finishRasterBrush(const TPointD &pos,
      m_tileSaver->save(bbox);
      m_bluredBrush->addArc(points[0], points[1], points[2], 1, 1);
      m_bluredBrush->updateDrawing(ti->getRaster(), m_backupRas, bbox,
                                   m_styleId, m_drawOrder.getIndex());
                                   m_styleId, m_drawOrder.getIndex(),
                                   m_modifierLockAlpha.getValue());

      invalidateRect += ToolUtils::getBounds(points, maxThickness) - rasCenter;

@@ -2045,9 +2064,9 @@ void ToonzRasterBrushTool::finishRasterBrush(const TPointD &pos,
    if (m_tileSet->getTileCount() > 0) {
      TUndoManager::manager()->add(new RasterBluredBrushUndo(
          m_tileSet, m_points, m_styleId, (DrawOrder)m_drawOrder.getIndex(),
          simLevel.getPointer(), frameId, m_rasThickness.getValue().second,
          m_hardness.getValue() * 0.01, m_isFrameCreated, m_isLevelCreated,
          m_isStraight));
          m_modifierLockAlpha.getValue(), simLevel.getPointer(), frameId,
          m_rasThickness.getValue().second, m_hardness.getValue() * 0.01,
          m_isFrameCreated, m_isLevelCreated, m_isStraight));
    }
  }
  delete m_tileSaver;
@@ -2356,6 +2375,7 @@ bool ToonzRasterBrushTool::onPropertyChanged(std::string propertyName) {
  BrushPressureSensitivity = m_pressure.getValue();
  RasterBrushHardness      = m_hardness.getValue();
  RasterBrushModifierSize  = m_modifierSize.getValue();
  BrushLockAlpha           = m_modifierLockAlpha.getValue();

  // Recalculate/reset based on changed settings
  if (propertyName == m_rasThickness.getName()) {
@@ -2427,6 +2447,7 @@ void ToonzRasterBrushTool::loadPreset() {
    m_pencil.setValue(preset.m_pencil);
    m_pressure.setValue(preset.m_pressure);
    m_modifierSize.setValue(preset.m_modifierSize);
    m_modifierLockAlpha.setValue(preset.m_modifierLockAlpha);

    // Recalculate based on updated presets
    m_minThick = m_rasThickness.getValue().first;
@@ -2448,12 +2469,13 @@ void ToonzRasterBrushTool::addPreset(QString name) {
  preset.m_min = m_rasThickness.getValue().first;
  preset.m_max = m_rasThickness.getValue().second;

  preset.m_smooth       = m_smooth.getValue();
  preset.m_hardness     = m_hardness.getValue();
  preset.m_drawOrder    = m_drawOrder.getIndex();
  preset.m_pencil       = m_pencil.getValue();
  preset.m_pressure     = m_pressure.getValue();
  preset.m_modifierSize = m_modifierSize.getValue();
  preset.m_smooth            = m_smooth.getValue();
  preset.m_hardness          = m_hardness.getValue();
  preset.m_drawOrder         = m_drawOrder.getIndex();
  preset.m_pencil            = m_pencil.getValue();
  preset.m_pressure          = m_pressure.getValue();
  preset.m_modifierSize      = m_modifierSize.getValue();
  preset.m_modifierLockAlpha = m_modifierLockAlpha.getValue();

  // Pass the preset to the manager
  m_presetsManager.addPreset(preset);
@@ -2491,6 +2513,7 @@ void ToonzRasterBrushTool::loadLastBrush() {
  m_pressure.setValue(BrushPressureSensitivity ? 1 : 0);
  m_smooth.setValue(BrushSmooth);
  m_modifierSize.setValue(RasterBrushModifierSize);
  m_modifierLockAlpha.setValue(BrushLockAlpha ? 1 : 0);

  // Recalculate based on prior values
  m_minThick = m_rasThickness.getValue().first;
  1  toonz/sources/tnztools/toonzrasterbrushtool.h 
Viewed
@@ -179,6 +179,7 @@ class ToonzRasterBrushTool final : public TTool, public RasterController {
  TBoolProperty m_pencil;
  TBoolProperty m_pressure;
  TDoubleProperty m_modifierSize;
  TBoolProperty m_modifierLockAlpha;

  RasterStrokeGenerator *m_rasterTrack;
  TTileSetCM32 *m_tileSet;
  18  toonz/sources/toonzlib/rasterstrokegenerator.cpp 
Viewed
@@ -9,7 +9,7 @@ RasterStrokeGenerator::RasterStrokeGenerator(const TRasterCM32P &raster,
                                             Tasks task, ColorType colorType,
                                             int styleId, const TThickPoint &p,
                                             bool selective, int selectedStyle,
                                             bool keepAntialias,
                                             bool lockAlpha, bool keepAntialias,
                                             bool isPaletteOrder)
    : m_raster(raster)
    , m_boxOfRaster(TRect(raster->getSize()))
@@ -21,7 +21,8 @@ RasterStrokeGenerator::RasterStrokeGenerator(const TRasterCM32P &raster,
    , m_selectedStyle(selectedStyle)
    , m_keepAntiAlias(keepAntialias)
    , m_doAnArc(false)
    , m_isPaletteOrder(isPaletteOrder) {
    , m_isPaletteOrder(isPaletteOrder)
    , m_modifierLockAlpha(lockAlpha) {
  TThickPoint pp = p;
  m_points.push_back(pp);
  if (task == ERASE) m_styleId = m_eraseStyle;
@@ -198,10 +199,15 @@ void RasterStrokeGenerator::placeOver(const TRasterCM32P &out,
      if (m_task == BRUSH) {
        int inTone  = inPix->getTone();
        int outTone = outPix->getTone();
        if (inPix->isPureInk() && !m_selective) {
        if (inPix->isPureInk() && !m_selective && !m_modifierLockAlpha) {
          *outPix = TPixelCM32(inPix->getInk(), outPix->getPaint(), inTone);
          continue;
        }
        if (m_modifierLockAlpha && !outPix->isPureInk() &&
            outPix->getPaint() == 0 && outPix->getTone() == 255) {
          *outPix = TPixelCM32(outPix->getInk(), outPix->getPaint(), outTone);
          continue;
        }
        if (outPix->isPureInk() && m_selective) {
          if (!m_isPaletteOrder || m_aboveStyleIds.contains(outPix->getInk())) {
            *outPix = TPixelCM32(outPix->getInk(), outPix->getPaint(), outTone);
@@ -253,8 +259,10 @@ void RasterStrokeGenerator::placeOver(const TRasterCM32P &out,
        }
      } else if (m_task == PAINTBRUSH) {
        if (!inPix->isPureInk()) continue;
        bool changePaint =
            !m_selective || (m_selective && outPix->getPaint() == 0);
        int paintIdx     = outPix->getPaint();
        bool changePaint = (!m_selective && !m_modifierLockAlpha) ||
                           (m_selective && paintIdx == 0) ||
                           (m_modifierLockAlpha && paintIdx != 0);
        if (m_colorType == INK)
          *outPix = TPixelCM32(inPix->getInk(), outPix->getPaint(),
                               outPix->getTone());
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
